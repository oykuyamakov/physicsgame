using System.IO;
using System.Text;
using UnityEngine;

#if UNITY_EDITOR


namespace UnityCommon.ScriptGeneration
{
	public static class AutoGenerator
	{
		//[UnityEditor.Callbacks.DidReloadScripts]
		private static void OnScriptsReloaded()
		{
			var rootDir = Application.dataPath + "/Scripts/AutoGenerated";

			if (Directory.Exists(rootDir) == false)
			{
				Directory.CreateDirectory(rootDir);
			}


			foreach (var assembly in System.AppDomain.CurrentDomain.GetAssemblies())
			{
				foreach (var type in assembly.GetTypes())
				{
					var attrs = type.GetCustomAttributes(typeof(AutoGenerateAttribute), false);

					if (attrs.Length > 0)
					{
						var ns = type.Namespace;

						var name = type.Name.Substring(0, type.Name.Length - 2);
						var att = ((AutoGenerateAttribute) attrs[0]);

						if (att.mergeFiles)
						{
							GenerateClassesMerged(rootDir, att.typeNameFormat, ns, name, att.typeNames);
						}
						else
						{
							GenerateClasses(rootDir, att.typeNameFormat, ns, name, att.typeNames);
						}
					}
				}
			}
		}


		private static void GenerateClasses(string rootDir, string typeNameFormat, string ns, string baseType,
		                                    string[] args)
		{
			var fileDir = $"{rootDir}/{baseType}";

			if (Directory.Exists(fileDir))
			{
				return;
				//Directory.Delete(fileDir, true);
			}

			Directory.CreateDirectory(fileDir);


			foreach (var arg in args)
			{
				var typeName = typeNameFormat.Replace("%t%", arg);
				typeName = typeName[0].ToString().ToUpper() + typeName.Substring(1, typeName.Length - 1);


				var fileName = $"{typeName}.cs";
				var filePath = $"{fileDir}/{fileName}";

				if (File.Exists(filePath))
				{
					File.Delete(filePath);
				}

				var contents = $@"using UnityEngine;
namespace {ns}
{{

public class {typeName} : {baseType}<{arg}> {{}}

}}";


				File.WriteAllText(filePath, contents, Encoding.UTF8);
			}
		}


		private static void GenerateClassesMerged(string rootDir, string typeNameFormat, string ns, string baseType,
		                                          string[] args)
		{
			var fileName = $"{baseType}_AutoGeneratedFamily.cs";
			var fileDir = $"{rootDir}/{baseType}";

			if (Directory.Exists(fileDir))
			{
				return;
				//Directory.Delete(fileDir, true);
			}

			Directory.CreateDirectory(fileDir);

			var filePath = $"{fileDir}/{fileName}";

			var contents = $"using UnityEngine; \r\n\r\nnamespace {ns}\r\n{{ \r\n\r\n";

			foreach (var arg in args)
			{
				var typeName = typeNameFormat.Replace("%t%", arg);
				typeName = typeName[0].ToString().ToUpper() + typeName.Substring(1, typeName.Length - 1);

				contents += $"public class {typeName} : {baseType}<{arg}> {{}} \n\r\n\r";
			}

			contents += "}\r\n";


			File.WriteAllText(filePath, contents, Encoding.UTF8);
		}
	}
}


#endif
